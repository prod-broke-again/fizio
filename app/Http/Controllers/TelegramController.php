<?php

namespace App\Http\Controllers;

use App\Services\TelegramService;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;

class TelegramController extends Controller
{
    protected TelegramService $telegramService;
    
    public function __construct(TelegramService $telegramService)
    {
        $this->telegramService = $telegramService;
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö Webhook –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram
     */
    public function handleWebhook(Request $request)
    {
        $update = $request->all();
        
        Log::info('Telegram webhook received', ['update' => $update]);
        
        try {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            if (isset($update['message'])) {
                $this->handleMessage($update['message']);
            } elseif (isset($update['callback_query'])) {
                $this->handleCallbackQuery($update['callback_query']);
            }
            
            return response()->json(['status' => 'ok']);
        } catch (\Exception $e) {
            Log::error('Error handling Telegram webhook', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
            ]);
            
            return response()->json(['status' => 'error'], 500);
        }
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Webhook –¥–ª—è –±–æ—Ç–∞
     */
    public function setupWebhook()
    {
        $webhookUrl = config('telegram.bots.' . config('telegram.default') . '.webhook_url');
        
        if (empty($webhookUrl)) {
            $webhookUrl = url('/api/telegram/webhook');
        }
        
        $result = $this->telegramService->setWebhook($webhookUrl);
        
        return response()->json($result);
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Webhook
     */
    public function getWebhookInfo()
    {
        $result = $this->telegramService->getWebhookInfo();
        
        return response()->json($result);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    protected function handleMessage(array $message)
    {
        $chatId = $message['chat']['id'];
        $text = $message['text'] ?? '';
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if (isset($message['entities']) && $message['entities'][0]['type'] === 'bot_command') {
            $this->handleCommand($chatId, $text);
            return;
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if ($text === '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ') {
            $this->sendOpenAppMessage($chatId);
        } else {
            // –õ—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            $this->sendWelcomeMessage($chatId);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
     */
    protected function handleCommand(string $chatId, string $text)
    {
        // –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª "/" –∏–∑ –Ω–∞—á–∞–ª–∞ –∫–æ–º–∞–Ω–¥—ã
        $command = strtolower(explode(' ', trim($text))[0]);
        
        switch ($command) {
            case '/start':
                $this->sendWelcomeMessage($chatId);
                break;
                
            case '/webapp':
            case '/app':
                $this->sendOpenAppMessage($chatId);
                break;
                
            default:
                // –õ—é–±–∞—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                $this->sendWelcomeMessage($chatId);
                break;
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ CallbackQuery
     */
    protected function handleCallbackQuery(array $callbackQuery)
    {
        $chatId = $callbackQuery['message']['chat']['id'];
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è callbackQuery
        $this->telegramService->callApi('answerCallbackQuery', [
            'callback_query_id' => $callbackQuery['id'],
        ]);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        $this->sendOpenAppMessage($chatId);
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    protected function sendWelcomeMessage(string $chatId)
    {
        $text = "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Fizio Fitness Bot!*\n\n";
        $text .= "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:";
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
        $keyboard = [
            ['–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'],
        ];
        
        $this->telegramService->sendMessage($chatId, $text, [
            'parse_mode' => 'Markdown',
            'reply_markup' => json_encode([
                'keyboard' => $keyboard,
                'resize_keyboard' => true,
                'one_time_keyboard' => false,
            ]),
        ]);
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    protected function sendOpenAppMessage(string $chatId)
    {
        $this->telegramService->sendMessage($chatId, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:', [
            'reply_markup' => json_encode([
                'inline_keyboard' => [
                    [
                        [
                            'text' => '–û—Ç–∫—Ä—ã—Ç—å Fizio',
                            'web_app' => ['url' => config('telegram.webapp.url')]
                        ]
                    ]
                ]
            ])
        ]);
    }
    
    /**
     * –°—Ç—Ä–∞–Ω–∏—Ü–∞ WebApp –¥–ª—è Telegram
     */
    public function webApp()
    {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ SPA –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
        return view('spa');
    }
} 